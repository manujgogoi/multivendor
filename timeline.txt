24-09-2021
====================================================
01:04 PM - 03:06 PM
----------------------------------------------------
1) pipenv setup
pipenv = pip + virtualenv
Pipenv is a packaging tool for Python that solves some common problems associated with the typical 
workflow using pip, virtualenv, and the good old requirements.txt.


# Intallation: 
>> pip install pipenv

# Upgrade to latest version:
>> pip install --upgrade pipenv


# Activate virtual env:
>> pipenv shell


# Check python version:
>> python --version


# Check path:
>> python
>> >>> import sys
>> >>> sys.executable
>> >>> quit()


# Install a package:
>> pipenv install <python_package_name>


# Deactivate virtual env:
>> exit


# Run a python script intalled into the virtualenv
>> pipenv run script.py


# Install packages using requirements.txt
>> pipenv install -r snippets/requirements.txt


# Generate output in requirements.txt format
>> pipenv lock -r
>> pipenv lock -r --dev (this include both the default and development dependencies.


# Install both develop and default packages
>> pipenv install <package_name> --dev


# Uninstall a package
>> pipenv uninstall <package_name>


# Change python version
	1. Change Pipfile python version to 3.6
	2. >> pipenv --python 3.6


# Remove virtual environment
>> pipenv --rm


# Create virtual environment using existing pipfile
>> pipenv install


# Check path of the virtual env
>> pipenv  --venv


# You can enforce that your Pipfile.lock is up to date using the --deploy flag:
>> pipenv install --deploy


# Installs all packages specified in Pipfile.lock.
>> pipenv sync


# Ignore Pipfile when installing, using the Pipfile.lock.
>> pipenv install --ignore-pipfile

# Create .env file in project root directory



25-09-2021
========================================================
06:30 PM to 08:30 PM
--------------------------------------------------------
1) Django project setup

# Install django using pipenv
>> pipenv install django

# Create a django project in current dir
>> django-admin startproject core .

2) Create account app
>> python manage.py startapp account 

3) Create a custom user model in account app
	i) In account.model import django.contrib.auth.models.AbstractBaseUser
	ii) Create a User class by extending AbstractBaseUser
	iii) Add email, active, staff, admin, and date_joined fileds.
	iv) Add USERNAME_FIELD = 'email'
	v) Add methods get_full_name(), and get_short_name()
	vi) Add @property methods- is_staff(), is_admin(), and is_active()
4) Create a manage class in account app
	i) Import django.contrib.auth.models.BaseUserManager
	ii) Create a UserManager class by extending BaseUserManager class
	iii) Implement create_user() method and also create_staffuser(), and create_superuser() methods.

3) In projects settings.py
	i) Add account app to INSTALLED_APPS
	ii) Add AUTH_USER_MODEL = 'accounts.User'
	iii) Set timezone- TIME_ZONE = 'Asia/Calcutta' 
	
4) MySQL database settings
	i) Create a new MySQL database called multivendor in phpMyAdmin (XAMPP)
	ii) Install python code for supporting the MySQL Db: pipenv install mysqlclient
	iii) Inside projects settings.py file change the DATABASE dictionary as follows:
		DATABASES = {
    			'default': {
        			'ENGINE': 'django.db.backends.mysql',
        			'NAME': 'mysite',	# mysql database
        			'USER': 'root',		# database username
        			'PASSWORD': '',		# database user password
        			'HOST': '',		
        			'PORT': '',
        			'OPTIONS': {
         			   'init_command': 'SET sql_mode="STRICT_TRANS_TABLES"'
        			}
    			}
		}

	iv) Migrate db: 
		>> python manage.py makemigrations
		>> python manage.py migrate
	v) Run dev Server: python manage.py runserver

5) Create superuser:
>> py manage.py createsuperuser

6) Fix 'User' object has no attribute 'has_module_perms'
	i) Add has_perm(self, perm, obj=None) and has_module_perms(self, app_label) to our custom user model

7) Register account.User to admin.

8) Create UserAdmin in admin by extending django.contrib.auth.admin.UserAdmin as BaseUserAdmin.

9) Change app name account to accounts.
	i) Delete database tables.
	ii) Rename account dir to accounts
	iii) Change AccountConfig(AppConfig) to AccountsConfig(AppConfig) in accounts.apps.py.
	iv) Change name = 'account' to name = 'accounts'
	v) In settings.py > INSTALLED_APPS change account to accounts.
	vi) Change any imports from account to accounts carefully.
	vii) py manage.py makemigrations accounts
	viii) py manage.py migrate

10) Create forms.py
	i) Add RegisterForm(forms.ModelForm)
	ii) Add UserAdminCreationForm(forms.ModelForm)
	iii) Add UserAdminChangeForm(forms.ModelForm)

27-09-2021
========================================================
06:30 AM - 09:30 AM
--------------------------------------------------------

1) Remove multivendor from local repository

2) git clone https://github.com/manujgogoi/multivendor.git

3) start xampp server

4) Remove all tables from multivendor database using phpMyAdmin

5) Update Accounts app:
	i) Delete all migrations from Accounts app
	ii) Add PermissionsMixin to our User class
	iii) Remove ModelAdmin.filter_horizontal from UserAdmin class
	iv) Add (override) get_form() method to UserAdmin class
		- Prevent non-superusers from editing user permissions
		- Prevent non-superusers from editing their own permissions
		- Prevent non-superusers from editing superusers permissions

6) Execute following commands:
	>>py manage.py makemigrations 
	>>py manage.py migrate
	>>py manage.py createsuperuser


7) git add, commit, and push to github repo.


10:04 PM - 11:00 PM
--------------------------------------------

8) Update Accounts.models
	i) Add help_text to User model fields

9) Unregister Group (in accounts.admin.py)
	>>from django.contrib.auth.models import Group
	>>admin.site.unregister(Group)

10) Remove is_active permissions from staff_user
	i) add is_active in disabled_fields section

11) >>git add .
	>>git commit
	
30-09-2021
========================================================
02:11 PM
--------------------------------------------------------

1) >>git push


07-10-2021
========================================================
01:30 PM
--------------------------------------------------------

1) Install Coverage
	>>pipenv coverage

2) Test accounts.models.py
	>>coverage run --source='.' manage.py test
	>>coverage report
	>>coverage erase # Remove gathered data 
	>>coverage html # Detailed html report

08-10-2021
========================================================
06:30 PM - 11:21 PM
--------------------------------------------------------
Implement testing for accounts.models.py


09-10-2021
========================================================
06:32 AM
--------------------------------------------------------
1) Creating vendor app
	>>py manage.py startapp vendor


19-10-2021
========================================================
05:53 PM
--------------------------------------------------------
DJANGO TEMPLATES & VIEWS

1) Create a dir named 'templates' inside of project root dir
2) Add following code insde of settings TEMPLATES:
	>>'DIRS': [BASE_DIR / "templates"],
	
3) Create urls.py inside of vendor app and added the following code:
	>>	from django.urls import path
		from . import views
	 	urlpatterns = [
    		path('',views.home),
		]

4) include this vendor urls.py inside of root(core) urls.py
	>>	urlpatterns = [
			....
    		path('vendor/',include("vendor.urls")),
			....
		]


20-10-2021
========================================================
06:04 AM
--------------------------------------------------------
1) Clean some codes
2) commit
3) push

08:34 PM
---------------------------------------------------------
Integrate django-allauth plugin

1) Install django-allauth
	>>pipenv install django-allauth

2) Configure allauth and templates


30-10-2021
=========================================================
08:00 AM
---------------------------------------------------------

1) Remove allauth and related templates
2) uninstall django-allauth

08:55 AM
---------------------------------------------------------

1) Install django-rest-framework
>> pipenv install djangorestframework

2) Add to INSTALLED_APPS setting (core.settings):

	INSTALLED_APPS = [
		...
		'rest_framework',
	]

3) Add REST_FRAMEWORK in setting:

	REST_FRAMEWORK = {
		# Use Django's standard `django.contrib.auth` permissions,
		# or allow read-only access for unauthenticated users.
		'DEFAULT_PERMISSION_CLASSES': [
			# 'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly',
			
			'rest_framework.permissions.AllowAny'
		]
	}

4) Install Django Cors Headers
>> pipenv install django-cors-headers

5) In INSTALLED_APPS settings add the following:
	
	INSTALLED_APPS = [
		...
		'corsheaders',
		...
	]

6) Add the middleware classes to listen in on server responses.

	MIDDLEWARE = [
		...,
		'corsheaders.middleware.CorsMiddleware',
		'django.middleware.common.CommonMiddleware',
		...,
	]

7) git add, commit and push

8) Merge test-allauth branch to main branch and delete test-allauth
>> git checkout main
>> git merge test-allauth
>> git branch -d test-allauth // delete local branch
>> git push origin --delete test-allauth //delete Remote branch

9) git add, commit and push


05:03 PM
--------------------------------------------------------

(djangorestframework and django-cors-headers are already installed)

1. >> git branch test-drf # Django Rest Framework
2. >> git checkout test-drf
3. >> pipenv install markdown # Markdown support for the browsable API.
4. >> pipenv install django-filter # # Filtering support
5. To add REST framework's login and logout views in browsable API
	added the following to root urls.py file.

	urlpatterns = [
		...
		path('api-auth/', include('rest_framework.urls'))
	]


Create the Snippets app
------------------------
1. >> py manage.py startapp snippets
2. Add snippets to INSTALLED_APPS
3. Create the Snippet Model
4. Install django-pygments
	>> pipenv install django-pygments

5. https://www.django-rest-framework.org/tutorial/1-serialization/


31-10-2021
=========================================================
05:45 AM - 06:30 AM, 08:00 AM - 09:30 AM, 11:00 AM - 01:00 PM
---------------------------------------------------------

6. snippet app -
	* Function based views
	* Class based views
	* ViewSets
	* Custom Object level permissions

7. Git add and commit changes
8. Then -
	>> git push origin test-drf


05:30 PM - 05:45 PM, 06:15 PM - 
----------------------------------------------------------
Authentication
----------------
1.  'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny'
    ],

2. Install Simple JWT 
	>> pipenv install djangorestframework-simplejwt


3. Add the following to REST_FRAMEWORK settings:
	
	'DEFAULT_AUTHENTICATION_CLASSES': (
        ...
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )


01-01-2021
=========================================================
05:00 AM - 01:16 PM (1:30 Hours gap)
---------------------------------------------------------
1. DRF 
	i) User ViewSet setup
	ii) User can create account
	iii) User can login
	iv) User can change password


02-01-2021
=========================================================
07:51 AM - 09:30 AM, 08:32 PM - 9:30 PM

1. DRF API automated testing


03-01-2021
=========================================================
06:24 AM - 10:30 AM

1. DRF API automated Testing

2. Accounts testing
	> accounts.models testing done
	> accounts.rest_api testing done
	> accounts.serializers testing done
	> accounts.views testing done
	Not covered
	> accounts.admin testing
	> accounts.forms testing
	> accounts.permissions testing

3. Git add, commit

07:00 PM - 08:20 PM

4. Vendor app
	> create VendorVeiwSet
	> create VendorSerializer
	> change 'created_by' field to 'owner' of Vendor model


04-11-2021
========================================================
06:10 AM - 11:30 AM

1. Create django store app
	>> py manage.py startapp stores

2. In stores.models.py
	> Category Model
	> Product Model
	> Product Image Model
		>>pipenv install pillow
	> Specification Model

3. Django media settings
	> In settings.py add the following settings
		# Media settings
		MEDIA_URL = "/media/"
		MEDIA_ROOT = BASE_DIR / "media/"
	> In core.urls.py add the following settings

		from django.conf import settings
		from django.conf.urls.static import static
		
		....

		if settings.DEBUG:
    		urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

3. Add stores app to INSTALLED_APPS
4. >>python manage.py makemigrations
5. >>python manage.py migrate

02:09 PM- 04:22 PM

6. Remove snippets app
	> Remove database tables
	>> py manage.py migrate snippets zero
	> Remove snippets app from INSTALLED_APPS in my projects settings.py
	> Delete snippets directory from project directory (I'll do it later)

7. Git add and commit

8. Merge test-drf branch to main and delete test-drf branch
	>> git checkout main  		#change branch to main
 	>> git merge test-drf 		#merge test-drf to main
	>> git branch -d test-drf 	#delete test-drf local
	>> git push origin --delete test-drf 	# delte test-drf remote (github)
	>> git push origin main 	#push updates to remote repo

9. Run testing to find any errors
	>> coverage run --source='.' manage.py test
	found errors related to deleted snippets app
	remove errors

10. Git and and commit

11. Create a new branch called stores-api
	>> git branch stores-api
	>> git checkout stores-api
	>> git push origin stores-api

12. Delete stores_ tables from db (mysql)
13. Delete all migration files from stores app
14. Then create migrations again

	>> python manage.py makemigrations
	>> python manage.py migrate

########################################
Problem
########################################
Delete stores tables from db
Delete migrations from stores app
Then execute >> py manage.py makemigrations stores # Works successfully
But 'py manage.py migrate stores' command gives 'No migration found'

Solution
#########################################
Go to django_migrations table and delete stores related migration records
Then migrate command worked

15. Run tests for any possible errors
16. Git add, commit and push to remote (stores-api)